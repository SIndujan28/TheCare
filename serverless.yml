# NOTE: update this with your service name
service: care-app

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  stage: ${opt:stage,self:provider.stage}
  memberTableName: '${self:custom.stage}-members'
  workerTableName: '${self:custom.stage}-workers'
  stripeSecretKey: '${env:stripeSecretKey}'
  BOT_TOKEN: '${env:BOT_TOKEN}'
  ACCOUNT_ID: '${env:ACCOUNT_ID}'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-southeast-1
  environment:
    memberTableName: ${self:custom.memberTableName}
    workerTableName: ${self:custom.workerTableName}
    stripeSecretKey: ${self:custom.stripeSecretKey}
    ACCOUNT_ID: ${self:custom.ACCOUNT_ID}
    BOT_TOKEN: ${self:custom.BOT_TOKEN}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - sqs:SendMessage
      Resource:
        - "Fn::GetAtt": [ MemberTable, Arn]
        - "Fn::GetAtt": [ WorkerTable, Arn]
        - "arn:aws:sqs:${self:provider.region}:*:MyQueue"

functions:
  member_create:
    handler: functions/member/create.main
    events:
      - http:
          path: member
          method: post
          cors: true
          authorizer: aws_iam

  member_get:
    handler: functions/member/get.main
    event:
      - http:
          path: member
          method: get
          cors: true
          authorizer: aws_iam

  member_delete:
    handler: functions/member/delete.main
    event:
      - http:
          path: member
          method: delete
          cors: true
          authorizer: aws_iam

  member_update:
    handler: functions/member/update.main
    event:
      - http:
          path: member/profile
          method: patch
          cors: true
          authorizer: aws_iam

  member_subscription:
    handler: functions/member/subscription/createSubscription.main
    event:
      - http:
          path: member/create_subscription
          method: post
          cors: true
          authorizer: aws_iam

  member_reattempt:
    handler: functions/member/reattempt.main
    event:
      - http:
          path: member/reattempt
          method: post
          cors: true
          authorizer: aws_iam

  member_listSubscription:
    handler: functions/member/subscription/listSubscription.main
    event:
      - http:
          path: member/list_subscription
          method: get
          cors: true
          authorizer: aws_iam

  member_listSubscriptionPlans:
    handler: functions/member/subscription/listSubscriptionPlans.main
    event:
      - http:
          path: member/list_subscription_plans
          method: get
          cors: true
          authorizer: aws_iam

  member_cancelSubscription:
    handler: functions/member/subscription/cancelSubscription.main
    event:
      - http:
          path: member/cancel_subscription
          method: delete
          cors: true
          authorizer: aws_iam

  member_getSubscription:
    handler: functions/member/subscription/getSubscription.main
    event:
      - http:
          path: member/get_subscription/{subscriptionId}
          method: get
          cors: true
          authorizer: aws_iam

  sqsHello:
    handler: functions/sqscheck.sqsHello
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - MyQueue
              - Arn
          batchSize: 10

  request_worker:
    handler: functions/member/requestWorker.main
    events:
      - http:
          method: post
          path: member/request
          cors: true
          authorizer: aws_iam

  telegramBot:
    handler: functions/member/telegram.main
    events:
      - http:
          method: post
          path: member/telegram
          cors: true

  worker_create:
    handler: functions/worker/create.main
    event:
      - http:
          path: worker
          method: post
          cors: true
          authorizer: aws_iam

  worker_get:
    handler: functions/worker/get.main
    event:
      - http:
          path: worker
          method: get
          cors: true
          authorizer: aws_iam

  worker_delete:
    handler: functions/worker/delete.main
    event:
      - http:
          path: worker
          method: delete
          cors: true
          authorizer: aws_iam
resources:
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/sqs-queue.yml)}
